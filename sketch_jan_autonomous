 /* Otonom olarak bir odanın krokisini çıkaran Ardıno Kodu */

  const int trigPinFront = 7;   /* The 1st sensor will be linked to the 6th leg of Arduino trigpini.  */
  const int echoPinFront = 8;   /* The echo pin of the 1st sensor is connected to Arduino's No. 7 foot.  */

  const int trigPinRight = 10;
  const int echoPinRight = 11;

  const int trigPinLeft = 2;
  const int echoPinLeft = 4;
  
  int echoPin;
  int TurnSpeed = 150;     /* With this variable, the speed of rotation of the motors can be controlled.*/
  
  int TurnTime = 250;  /*It is a variable that allows the rotation of a Donmatian variant of a robot to rotate 90 degrees. We have set the approximate time for turning the robot about 90 degrees. */

  const int rightback = 5;
  const int rightforward = 3;
  
  const int leftback= 9;
  const int leftforward = 6;
  
  const int leftenable = 13;
  
  const int rightenable= 12;
  
  long DistanceCalculateL()     /* Calculating distance of Left   */
  {
  long timeL;
  long distanceL;
  digitalWrite(trigPinLeft, LOW);       /*Sensör set the LOW state. */
  delayMicroseconds(5);
  digitalWrite(trigPinLeft, HIGH);      /* We order to produce a sensory sound wave. */
  delayMicroseconds(10);
  digitalWrite(trigPinLeft, LOW);       /*The trig pini LOW is made so that new waves are not produced. */
  
  timeL = pulseIn(echoPin, HIGH, 11600);     /* The time it takes for the sound wave to return is measured. */
  distanceL = timeL /2/ 29.1;                /* For the predicted room temperature (20C) the required value is 29.1. */
  
  return distanceL;
  }
    long DistanceCalculateF()     /* Calculating distance of Medium */
  {
  long timeF;
 long distanceF;
  digitalWrite(trigPinFront, LOW); /*Sensör set the LOW state. */
  delayMicroseconds(5);
  digitalWrite(trigPinFront, HIGH); 
  delayMicroseconds(10);
  digitalWrite(trigPinFront, LOW); 
  
  timeF = pulseIn(echoPin, HIGH, 11600); 
  distanceF = timeF /2/ 29.1;  
  
  return distanceF;
  }
long DistanceCalculateR()      /* Calculating distance of Right */
  {
  long timeR;
  long distanceR;
  digitalWrite(trigPinRight, LOW);
  delayMicroseconds(5);
  digitalWrite(trigPinRight, HIGH); 
  delayMicroseconds(10);
  digitalWrite(trigPinRight, LOW); 
  
  timeR = pulseIn(echoPin, HIGH, 11600);
  distanceR = timeR /2/ 29.1;  
  return distanceR;
  
  }
    void forward(int speed){  
    
   /* The speed of our motors should be between 0-255.
   * But some engines are running between 60-255 when the torque is insufficient.
   * If the motord is a high-pitched sound, we need to increase the speed.
   */  
   
  analogWrite(rightenable, speed);       /* Speed data of right engine. */
  digitalWrite(rightback,HIGH);           /* Turn forward */
  
  
  analogWrite(leftenable, speed); 
  digitalWrite(leftback,HIGH);
  
  }
   void turnRight(int speed){
     
   analogWrite(rightenable, speed);
   digitalWrite(rightback,LOW);
   
   analogWrite(leftenable,speed);
   digitalWrite(leftback,HIGH);
 }
  void turnLeft(int speed){
    
  analogWrite(rightenable,speed);
  digitalWrite(rightback,HIGH);
  
  analogWrite(leftenable,speed);
  digitalWrite(leftback,LOW);
}

  void stop()
 {
  /* Tüm motorlar kitlenerek durma sağlanıyor */
  digitalWrite(rightforward, HIGH);
  digitalWrite(rightback, HIGH);
  digitalWrite(leftforward, HIGH);
  digitalWrite(leftback, HIGH);
 }
void setup(){
  
  Serial.begin(9600);                 /*Open the serial port for Bluetooth , 9600 bps data speed. */
  
  pinMode(trigPinLeft ,OUTPUT);            /* Set output cause of audio wave propagation from sensor. */
  pinMode(echoPinLeft,INPUT);             /* Set input cause of audio wave come to sensor. */

  pinMode(trigPinFront ,OUTPUT);            /* Set output cause of audio wave propagation from sensor. */
  pinMode(echoPinFront,INPUT);             /* Set input cause of audio wave come to sensor. */

  pinMode(trigPinRight ,OUTPUT);            /* Set output cause of audio wave propagation from sensor. */
  pinMode(echoPinRight,INPUT);             /* Set input cause of audio wave come to sensor. */
  
  pinMode(rightback,OUTPUT);
  pinMode(leftback,OUTPUT);

  pinMode(leftenable,OUTPUT);
  pinMode(rightenable,OUTPUT);  
}
void loop(){
  
//  while(DistanceCalculateF() > 10 ){   // Go straight to the unobstructed
//    forward(TurnSpeed);
//  }
//  
//  turnLeft(TurnSpeed);
//}

  
if(DistanceCalculateL() < 12) {
  if(DistanceCalculateF()< 12){
     turnRight(TurnSpeed);  
        delay(500);
          
          forward(TurnSpeed); 
  }
      else {
       forward(TurnSpeed);
     }
}
else if( DistanceCalculateR() < 12){
  
  if( DistanceCalculateF()<12){
     turnLeft(TurnSpeed);                                                                    
     delay(500);                                                                              
     forward(TurnSpeed);
  }
  else {
    forward(TurnSpeed);
  }
}
  }
  

